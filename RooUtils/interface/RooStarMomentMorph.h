/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef ROOSTARMOMENTMORPH
#define ROOSTARMOMENTMORPH

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include "RooSetProxy.h"
#include "RooListProxy.h"
#include "RooArgList.h"

#include "TMatrixD.h"

#include <vector>
#include <string>
class RooChangeTracker ;

class RooStarMomentMorph : public RooAbsPdf {
public:

  enum Setting { Linear, NonLinear, NonLinearPosFractions, NonLinearLinFractions } ;

  RooStarMomentMorph() ;
  
  RooStarMomentMorph(const char *name, const char *title, const RooArgList& parList, 
		     const RooArgList& obsList, const RooArgList& pdfList, 
		     const std::vector<int>& nnuispoints, // # of pdfs for each nuisance parameter
		     const std::vector<double>& nrefpoints, 
		     const Setting& setting = NonLinearPosFractions );

  RooStarMomentMorph(const RooStarMomentMorph& other, const char* name=0) ;

  virtual TObject* clone(const char* newname) const { return new RooStarMomentMorph(*this,newname); }

  virtual ~RooStarMomentMorph();

  void     setMode(const Setting& setting) { _setting = setting; }

  int nnuisSize() { return _nnuis.size(); }

  virtual Bool_t selfNormalized() const { 
    // P.d.f is self normalized
    return kTRUE ; 
  }

  virtual Double_t getVal(const RooArgSet* set=0) const ;
  RooAbsPdf* sumPdf(const RooArgSet* nset) ;

  Bool_t setBinIntegrator(RooArgSet& allVars);
  void useHorizontalMorphing(Bool_t val) { _useHorizMorph=val; }


  class CacheElem : public RooAbsCacheElement {
  public:
    CacheElem(RooAbsPdf& sumPdf, RooChangeTracker& tracker, const RooArgList& flist) : _sumPdf(&sumPdf), _tracker(&tracker), _fractionsCalculated(false) { _frac.add(flist) ; } ;
    void operModeHook(RooAbsArg::OperMode) {};
    virtual ~CacheElem() ; 
    virtual RooArgList containedArgs(Action) ;
    RooAbsPdf* _sumPdf ;
    RooChangeTracker* _tracker ; 
    RooArgList _frac ;

    RooRealVar* frac(Int_t i ) ;
    const RooRealVar* frac(Int_t i ) const ; 
    void calculateFractions(const RooStarMomentMorph& self, Bool_t verbose=kTRUE) const;
    mutable bool _fractionsCalculated;
  } ;
  mutable RooObjCacheManager _cacheMgr ; //! The cache manager
  mutable RooArgSet* _curNormSet ; //! Current normalization set

protected:

  friend class CacheElem ; // Cache needs to be able to clear _norm pointer

  Double_t evaluate() const ;

  void     initialize();
  CacheElem* getCache(const RooArgSet* nset) const ;

  Int_t ij(const Int_t& i, const Int_t& j) const;
  Int_t ijhi(const Int_t& i, const double& nval) const;
  Int_t ijlo(const Int_t& i, const double& nval) const;

  inline Int_t sij(const Int_t& i, const Int_t& j) const { return (i*_obsList.getSize()+j); }

  
  RooListProxy _parList ;
  RooSetProxy  _obsList ;
  RooListProxy _pdfList ;

  mutable std::vector<int> _nnuis; 
  mutable std::vector<double> _nref;

  TIterator* _parItr ;  //! do not persist
  TIterator* _obsItr ;  //! do not persist
  TIterator* _pdfItr ;  //!
  mutable TMatrixD* _M; //!

  Setting _setting;
  unsigned int _nnuisvar;

  Bool_t _useHorizMorph;

  ClassDef(RooStarMomentMorph,1) // Your description goes here...
};
 
#endif


